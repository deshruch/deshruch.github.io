---
title: Employee GraphQL API Overview
intro: 'The Employee GraphQL API gives you the ability to define precisely the employee data you want to fetch.'
---

# Overview



## About the Employee GraphQL API reference

Use the [Employee GraphQL API reference](https://deshruch.github.io/#introduction) to find out what data you can call:

* Allowed operations: [queries](https://deshruch.github.io/#group-Operations-Queries) and [mutations](https://deshruch.github.io/#group-Operations-Mutations).

* Schema-defined types: [scalars](https://docs.github.com/en/graphql/reference/scalars), [objects](https://docs.github.com/en/graphql/reference/objects), [enums](https://docs.github.com/en/graphql/reference/enums), [interfaces](https://docs.github.com/en/graphql/reference/interfaces), [unions](https://docs.github.com/en/graphql/reference/unions), and [input objects](https://docs.github.com/en/graphql/reference/input-objects).

If you are not familiar with GraphQL, read [About GraphQL](#about-graphql). 

Here are some quick links to get you up and running with the Employee GraphQL API:

* [Forming calls with GraphQL](https://github.com/github/docs/blob/main/content/graphql/guides/introduction-to-graphql.md#discovering-the-graphql-api)
* [Authentication](https://docs.github.com/en/graphql/guides/forming-calls-with-graphql#authenticating-with-graphql)
* [Root endpoint](https://docs.github.com/en/graphql/guides/forming-calls-with-graphql#the-graphql-endpoint)
* [Schema introspection](https://docs.github.com/en/graphql/guides/introduction-to-graphql#discovering-the-graphql-api)
* [Rate limits](https://docs.github.com/en/graphql/overview/resource-limitations)
* [Migrating from REST](https://docs.github.com/en/graphql/guides/migrating-from-rest-to-graphql)


## About GraphQL
### What is GraphQL?
GraphQL offers the ability to define precisely the data you want and only the data you want. It provides a powerful advantage over traditional REST API endpoints. GraphQL lets you replace multiple REST requests with a single call  to fetch the data you specify.

The [GraphQL](https://graphql.github.io/) data query language is:

* **A [specification](https://graphql.github.io/graphql-spec/June2018/).** The spec determines the validity of the [schema](#schema) on the API server. The schema determines the validity of client calls.

* **[Strongly typed](https://docs.github.com/en/graphql/overview/about-the-graphql-api#about-the-graphql-schema-reference).** The schema defines an API's type system and all object relationships.

* [**Introspective**](https://graphql.org/learn/introspection/). A client can query the schema for details about the schema.

* **[Hierarchical](https://docs.github.com/en/graphql/guides/forming-calls-with-graphql).** The shape of a GraphQL call mirrors the shape of the JSON data it returns. [Nested fields](https://docs.github.com/en/graphql/guides/migrating-from-rest-to-graphql#example-nesting) let you query for and receive only the data you specify in a single round trip.

* **An application layer.** GraphQL is not a storage model or a database query language. The _graph_ refers to graph structures defined in the schema, where [nodes](#node) define objects and [edges](#edge) define relationships between objects. The API traverses and returns application data based on the schema definitions, independent of how the data is stored.

### GraphQL terminology

The GitHub GraphQL API represents an architectural and conceptual shift from the GitHub REST API. You will likely encounter some new terminology in the [Employee GraphQL API reference](https://deshruch.github.io/#introduction).

#### Schema

A schema defines a GraphQL API's type system. It describes the complete set of possible data (objects, fields, relationships, everything) that a client can access. Calls from the client are [validated](https://graphql.github.io/learn/validation/) and [executed](https://graphql.github.io/learn/execution/) against the schema. A client can find information about the schema via [introspection](https://graphql.org/learn/introspection/). A schema resides on the GraphQL API server. For more information, see "[Discovering the GraphQL API](https://github.com/github/docs/blob/main/content/graphql/guides/introduction-to-graphql.md#discovering-the-graphql-api)."

#### Field

A field is a unit of data you can retrieve from an object. As the [official GraphQL docs](https://graphql.github.io/learn/schema/) say:
"The GraphQL query language is basically about selecting fields on objects."

The [official spec](https://graphql.github.io/graphql-spec/June2018/#sec-Language.Fields) also says about fields:

> All GraphQL operations must specify their selections down to fields which return scalar values to ensure an unambiguously shaped response.

This means that if you try to return a field that is not a scalar, schema validation will throw an error. You must add nested subfields until all fields return scalars.

#### Argument

An argument is a set of key-value pairs attached to a specific field. Some fields require an argument. [Mutations](/graphql/guides/forming-calls-with-graphql#about-mutations) require an input object as an argument.

#### Queries

Every GraphQL schema has a root type for both queries and mutations. The [query type](https://graphql.github.io/graphql-spec/June2018/#sec-Type-System) defines GraphQL operations that retrieve data from the server.

For more information, see "[About queries](https://docs.github.com/en/graphql/reference/queries#about-queries)."

{% note %}

**Note:** For [user-to-server](/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you should use separate queries for issues and pull requests. For example, use the `is:issue` or `is:pull-request` filters and their equivalents. Using the `search` connection to return a combination of issues and pull requests in a single query will result in an empty set of nodes.

{% endnote %}

#### Mutations

Every GraphQL schema has a root type for both queries and mutations. The [mutation type](https://graphql.github.io/graphql-spec/June2018/#sec-Type-System) defines GraphQL operations that change data on the server. It is analogous to performing HTTP verbs such as `POST`, `PATCH`, and `DELETE`.

For more information, see "[About mutations](/graphql/guides/forming-calls-with-graphql#about-mutations)."

#### Implementation

A GraphQL schema may use the term _implements_ to define how an object inherits from an [interface](/graphql/reference/interfaces). For an example of a schema that defines interface `X` and object `Y`, refer to [implementation](https://docs.github.com/en/graphql/guides/introduction-to-graphql#implementation).


In the API reference docs, you'll find that:

* Each [object](https://docs.github.com/en/graphql/reference/objects) lists the interface(s) _from which it inherits_ under **Implements**.

* Each [interface](https://docs.github.com/en/graphql/reference/interfaces) lists the objects _that inherit from it_ under **Implementations**.

#### Connection

Connections let you query related objects as part of the same call. With connections, you can use a single GraphQL call where you would have to use multiple calls to a REST API. For more information, see "[Migrating from REST to GraphQL](https://docs.github.com/en/graphql/guides/migrating-from-rest-to-graphql)."

It's helpful to picture a graph: dots connected by lines. The dots are nodes, the lines are edges. A connection defines a relationship between nodes.

#### Edge

Edges represent connections between nodes. When you query a connection, you traverse its edges to get to its nodes. Every `edges` field has a `node` field and a `cursor` field. Cursors are used for [pagination](https://graphql.github.io/learn/pagination/).

#### Node

_Node_ is a generic term for an object. You can look up a node directly, or you can access related nodes via a connection. If you specify a `node` that does not return a [scalar](https://docs.github.com/en/graphql/reference/scalars), you must include subfields until all fields return scalars. For information on accessing node IDs via the REST API and using them in GraphQL queries, see "[Using Global Node IDs](https://docs.github.com/en/graphql/guides/using-global-node-ids)."


